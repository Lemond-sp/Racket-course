;3
;definition
(define (variable? x) (symbol? x))
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (subtract? x) (and (pair? x) (eq? (car x) '-)))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (division? x) (and (pair? x) (eq? (car x) '/)))
(define (power? x) (and (pair? x) (eq? (car x) '^)))
(define (arg1 s) (car (cdr s)))
(define (arg2 s) (car (cdr (cdr s))))
(define (operator? x) (or (sum? x) (subtract? x) (product? x) (division? x) (power? x)))
(define (var_target var ind) (car(cdr (assoc ind var))))
(define vars '((x 3) (y 10) (z 2)))
;試し
(variable? vars)
(cdr (assoc 'y vars))
(* 10 (car(cdr (assoc 'y vars))))
(car(cdr (assoc 'y vars)))
(operator? '(^ 1 2))

(var_target vars 'x)

;(define (evaluate exp var))
(define (evaluate exp var)
  (cond ((sum? exp)
         (+ (evaluate (arg1 exp) var) (evaluate (arg2 exp) var)))
        ((subtract? exp)
         (- (evaluate (arg1 exp) var) (evaluate (arg2 exp) var)))
        ((product? exp)
         (* (evaluate (arg1 exp) var) (evaluate (arg2 exp) var)))
        ((division? exp)
         (/ (evaluate (arg1 exp) var) (evaluate (arg2 exp) var)))
        ((power? exp)
         (expt (evaluate (arg1 exp) var) (evaluate (arg2 exp) var)))
        ((variable? exp)
         (var_target var exp))
        ((number? exp) exp)
        (else
         (error "unknown expression type !!" exp))))
(evaluate '(+ (* y 3) 1) vars)
(evaluate '(+ (^ y z) x) vars)
(evaluate '(/ (- (* 3 (* x y)) (^ x 3))
(+ (* 6 x) (^ y z))) vars)

